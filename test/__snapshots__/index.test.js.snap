// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should allow passing a custom render prop to LayoutTree 1`] = `
<LayoutTree
  Component={
    Object {
      "$$typeof": Symbol(react.forward_ref),
      "displayName": "WithLayout(Home)",
      "render": [Function],
    }
  }
  pageProps={
    Object {
      "foo": "bar",
    }
  }
>
  <PrimaryLayout>
    <main>
      <WithLayout(Home)
        foo="bar"
      >
        <Home
          foo="bar"
        >
          <h1>
            Home
          </h1>
        </Home>
      </WithLayout(Home)>
    </main>
  </PrimaryLayout>
</LayoutTree>
`;

exports[`should allow passing a custom render prop to LayoutTree 2`] = `
<PrimaryLayout>
  <WithLayout(Home)
    foo="bar"
  />
</PrimaryLayout>
`;

exports[`should ignore setLayoutState calls if Component's pageKey is not the active pageKey of LayoutTree 1`] = `
<LayoutTree
  Component={
    Object {
      "$$typeof": Symbol(react.forward_ref),
      "displayName": "WithLayout(Foo)",
      "render": [Function],
    }
  }
  pageKey="foo"
>
  <PrimaryLayout
    variant="light"
  >
    <main>
      <WithLayout(Foo)
        key="foo"
        pageKey="foo"
      >
        <Foo
          setLayoutState={[Function]}
        >
          <h1>
            Foo
          </h1>
        </Foo>
      </WithLayout(Foo)>
    </main>
  </PrimaryLayout>
  <WithLayout(Foo)
    foo={true}
  >
    <Foo
      foo={true}
      setLayoutState={[Function]}
    >
      <h1>
        Foo
      </h1>
    </Foo>
  </WithLayout(Foo)>
</LayoutTree>
`;

exports[`should ignore setLayoutState calls if page is not the active Component of LayoutTree 1`] = `
<LayoutTree
  Component={
    Object {
      "$$typeof": Symbol(react.forward_ref),
      "displayName": "WithLayout(Home)",
      "render": [Function],
    }
  }
>
  <PrimaryLayout
    variant="light"
  >
    <main>
      <WithLayout(Home)>
        <Home
          setLayoutState={[Function]}
        >
          <h1>
            Home
          </h1>
        </Home>
      </WithLayout(Home)>
    </main>
  </PrimaryLayout>
  <WithLayout(Foo)>
    <Foo
      setLayoutState={[Function]}
    >
      <h1>
        Foo
      </h1>
    </Foo>
  </WithLayout(Foo)>
</LayoutTree>
`;

exports[`should not forward pageKey if component in not wrapped with HOC 1`] = `
<LayoutTree
  Component={[Function]}
  pageKey="foo"
  pageProps={
    Object {
      "foo": "bar",
    }
  }
>
  <Home
    foo="bar"
    key="foo"
  >
    <h1>
      Home
    </h1>
  </Home>
</LayoutTree>
`;

exports[`should render a layout tree correctly based the initial layout state (function) 1`] = `
<LayoutTree
  Component={
    Object {
      "$$typeof": Symbol(react.forward_ref),
      "displayName": "WithLayout(Home)",
      "render": [Function],
    }
  }
  pageProps={
    Object {
      "light": true,
    }
  }
>
  <PrimaryLayout
    variant="light"
  >
    <main>
      <WithLayout(Home)
        light={true}
      >
        <Home
          light={true}
          setLayoutState={[Function]}
        >
          <h1>
            Home
          </h1>
        </Home>
      </WithLayout(Home)>
    </main>
  </PrimaryLayout>
</LayoutTree>
`;

exports[`should render a layout tree correctly based the initial layout state 1`] = `
<LayoutTree
  Component={
    Object {
      "$$typeof": Symbol(react.forward_ref),
      "displayName": "WithLayout(Home)",
      "render": [Function],
    }
  }
>
  <PrimaryLayout
    variant="light"
  >
    <main>
      <WithLayout(Home)>
        <Home
          setLayoutState={[Function]}
        >
          <h1>
            Home
          </h1>
        </Home>
      </WithLayout(Home)>
    </main>
  </PrimaryLayout>
</LayoutTree>
`;

exports[`should render a one level deep layout tree correctly 1`] = `
<LayoutTree
  Component={
    Object {
      "$$typeof": Symbol(react.forward_ref),
      "displayName": "WithLayout(Home)",
      "render": [Function],
    }
  }
  pageProps={
    Object {
      "foo": "bar",
    }
  }
>
  <PrimaryLayout>
    <main>
      <WithLayout(Home)
        foo="bar"
      >
        <Home
          foo="bar"
        >
          <h1>
            Home
          </h1>
        </Home>
      </WithLayout(Home)>
    </main>
  </PrimaryLayout>
</LayoutTree>
`;

exports[`should render a two level deep layout tree correctly 1`] = `
<LayoutTree
  Component={
    Object {
      "$$typeof": Symbol(react.forward_ref),
      "displayName": "WithLayout(Home)",
      "render": [Function],
    }
  }
  pageProps={
    Object {
      "foo": "bar",
    }
  }
>
  <PrimaryLayout>
    <main>
      <AccountLayout>
        <div>
          <WithLayout(Home)
            foo="bar"
          >
            <Home
              foo="bar"
            >
              <h1>
                Home
              </h1>
            </Home>
          </WithLayout(Home)>
        </div>
      </AccountLayout>
    </main>
  </PrimaryLayout>
</LayoutTree>
`;

exports[`should render default layout 1`] = `
<LayoutTree
  Component={[Function]}
  defaultLayout={<PrimaryLayout />}
  pageProps={
    Object {
      "foo": "bar",
    }
  }
>
  <PrimaryLayout>
    <main>
      <Home
        foo="bar"
      >
        <h1>
          Home
        </h1>
      </Home>
    </main>
  </PrimaryLayout>
</LayoutTree>
`;

exports[`should render no layout 1`] = `
<LayoutTree
  Component={[Function]}
  pageProps={
    Object {
      "foo": "bar",
    }
  }
>
  <Home
    foo="bar"
  >
    <h1>
      Home
    </h1>
  </Home>
</LayoutTree>
`;

exports[`should update the layout tree correctly if Component changes 1`] = `
<LayoutTree
  Component={
    Object {
      "$$typeof": Symbol(react.forward_ref),
      "displayName": "WithLayout(Home)",
      "render": [Function],
    }
  }
>
  <PrimaryLayout
    variant="light"
  >
    <main>
      <WithLayout(Home)>
        <Home>
          <h1>
            Home
          </h1>
        </Home>
      </WithLayout(Home)>
    </main>
  </PrimaryLayout>
</LayoutTree>
`;

exports[`should update the layout tree correctly if Component changes 2`] = `
<LayoutTree
  Component={
    Object {
      "$$typeof": Symbol(react.forward_ref),
      "displayName": "WithLayout(Foo)",
      "render": [Function],
    }
  }
>
  <PrimaryLayout
    variant="dark"
  >
    <main>
      <WithLayout(Foo)>
        <Foo>
          <h1>
            Foo
          </h1>
        </Foo>
      </WithLayout(Foo)>
    </main>
  </PrimaryLayout>
</LayoutTree>
`;

exports[`should update the layout tree correctly if pageKey changes 1`] = `
<LayoutTree
  Component={
    Object {
      "$$typeof": Symbol(react.forward_ref),
      "displayName": "WithLayout(Home)",
      "render": [Function],
    }
  }
  pageKey="foo"
>
  <PrimaryLayout
    variant="dark"
  >
    <main>
      <WithLayout(Home)
        key="foo"
        pageKey="foo"
      >
        <Home
          setLayoutState={[Function]}
        >
          <h1>
            Home
          </h1>
        </Home>
      </WithLayout(Home)>
    </main>
  </PrimaryLayout>
</LayoutTree>
`;

exports[`should update the layout tree correctly if pageKey changes 2`] = `
<LayoutTree
  Component={
    Object {
      "$$typeof": Symbol(react.forward_ref),
      "displayName": "WithLayout(Home)",
      "render": [Function],
    }
  }
  pageKey="bar"
>
  <PrimaryLayout
    variant="light"
  >
    <main>
      <WithLayout(Home)
        key="bar"
        pageKey="bar"
      >
        <Home
          setLayoutState={[Function]}
        >
          <h1>
            Home
          </h1>
        </Home>
      </WithLayout(Home)>
    </main>
  </PrimaryLayout>
</LayoutTree>
`;
